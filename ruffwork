
Consumer Key  lqVfJpTFYAhTVWdeImof
Consumer Secret HDkIWQuwiOzDyFhvwfhVwfYARtFrMjNo
Request Token URL https://api.discogs.com/oauth/request_token
Authorize URL https://www.discogs.com/oauth/authorize
Access Token URL  https://api.discogs.com/oauth/access_token


Mongo
"F:\Libraries\Downloads"F:\Libraries\Downloads""
Server
"C:\Program Files\MongoDB\Server\3.4.7\bin\mongod.exe"
Client
"C:\Program Files\MongoDB\Server\3.4.7\bin\mongo.exe"


oauth
google clientid: 792475719620-g9mnic20ku91en69o8bsqq881o0p694a.apps.googleusercontent.com
google client secret: mMD5EBghDcOsGgtU1a6JZT0u

facebook appid: 1997243753827485
facebook: appsecret: 0ee9d6ff8e86e9319e9715b3faf577f4
v2.10

var artistSchema = new mongoose.Schema({
  _id: Number,
  name: String,
  airsDayOfWeek: String,
  airsTime: String,
  firstAired: Date,
  genre: [String],
  network: String,
  overview: String,
  rating: Number,
  ratingCount: Number,
  status: String,
  poster: String,
  subscribers: [{
    type: mongoose.Schema.Types.ObjectId, ref: 'User'
  }],
  episodes: [{
      season: Number,
      episodeNumber: Number,
      episodeName: String,
      firstAired: Date,
      overview: String
  }]
});



var artistSchema = new mongoose.Schema({
  namevariations: [ String ],
  profile: String,
  releases_url: String,
  resource_url: String,
  uri: String,
  urls: [ String ],
  data_quality: String,
  id: number,
  images: [
    {
      height: number,
      resource_url: string,
      type: string,
      uri: string,
      uri150: string,
      width: number
    },
    {
      height: number,
      resource_url: string,
      type: string,
      uri: string,
      uri150: string,
      width: number
    }
  ],
  members: [
    {
      active: Boolean,
      id: number,
      name: string,
      resource_url: string
    }
  ],
});


app.post('/api/artists', function(req, res, next) {
  var apiKey = '9EF1D1E7D28FDA0B';
  var parser = xml2js.Parser({
    explicitArray: false,
    normalizeTags: true
  });
  var seriesName = req.body.artistName
    .toLowerCase()
    .replace(/ /g, '_')
    .replace(/[^\w-]+/g, '');
  
  async.waterfall([
    function(callback) {
      request.get('http://thetvdb.com/api/GetSeries.php?seriesname=' + seriesName, function(error, response, body) {
        if (error) return next(error);
        parser.parseString(body, function(err, result) {
          if (!result.data.series) {
            return res.send(404, { message: req.body.artistName + ' was not found.' });
          }
          var seriesId = result.data.series.seriesid || result.data.series[0].seriesid;
          callback(err, seriesId);
        });
      });
    },
    function(seriesId, callback) {
      request.get('http://thetvdb.com/api/' + apiKey + '/series/' + seriesId + '/all/en.xml', function(error, response, body) {
        if (error) return next(error);
        parser.parseString(body, function(err, result) {
          var series = result.data.series;
          var episodes = result.data.episode;
          var artist = new artist({
            _id: series.id,
            name: series.seriesname,
            airsDayOfWeek: series.airs_dayofweek,
            airsTime: series.airs_time,
            firstAired: series.firstaired,
            genre: series.genre.split('|').filter(Boolean),
            network: series.network,
            overview: series.overview,
            rating: series.rating,
            ratingCount: series.ratingcount,
            runtime: series.runtime,
            status: series.status,
            poster: series.poster,
            episodes: []
          });
          _.each(episodes, function(episode) {
            artist.episodes.push({
              season: episode.seasonnumber,
              episodeNumber: episode.episodenumber,
              episodeName: episode.episodename,
              firstAired: episode.firstaired,
              overview: episode.overview
            });
          });
          callback(err, artist);
        });
      });
    },
    function(artist, callback) {
      var url = 'http://thetvdb.com/banners/' + artist.poster;
      request({ url: url, encoding: null }, function(error, response, body) {
        artist.poster = 'data:' + response.headers['content-type'] + ';base64,' + body.toString('base64');
        callback(error, artist);
      });
    }
  ], function(err, artist) {
    if (err) return next(err);
    artist.save(function(err) {
      if (err) {
        if (err.code == 11000) {
          return res.send(409, { message: artist.name + ' already exists.' });
        }
        return next(err);
      }
      res.send(200);
    });
  });
});

